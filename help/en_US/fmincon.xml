<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from fmincon.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="fmincon" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>fmincon</refname>
    <refpurpose>Solves a multivariable constrained optimization problem.</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   xopt = fmincon(f,x0,A,b)
   xopt = fmincon(f,x0,A,b,Aeq,beq)
   xopt = fmincon(f,x0,A,b,Aeq,beq,lb,ub)
   xopt = fmincon(f,x0,A,b,Aeq,beq,lb,ub,nlc)
   xopt = fmincon(f,x0,A,b,Aeq,beq,lb,ub,nlc,options)
   [xopt,fopt] = fmincon(.....)
   [xopt,fopt,exitflag]= fmincon(.....)
   [xopt,fopt,exitflag,output]= fmincon(.....)
   [xopt,fopt,exitflag,output,lambda]=fmincon(.....)
   [xopt,fopt,exitflag,output,lambda,gradient]=fmincon(.....)
   [xopt,fopt,exitflag,output,lambda,gradient,hessian]=fmincon(.....)
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Input Parameters</title>
   <variablelist>
   <varlistentry><term>f :</term>
      <listitem><para> A function, representing the objective function of the problem.</para></listitem></varlistentry>
   <varlistentry><term>x0 :</term>
      <listitem><para> A vector of doubles, containing the starting values of variables of size (1 X n) or (n X 1) where 'n' is the number of variables.</para></listitem></varlistentry>
   <varlistentry><term>A :</term>
      <listitem><para> A matrix of doubles, containing the coefficients of linear inequality constraints of size (m X n) where 'm' is the number of linear inequality constraints.</para></listitem></varlistentry>
   <varlistentry><term>b :</term>
      <listitem><para> A vector of doubles, related to 'A' and represents the linear coefficients in the linear inequality constraints of size (m X 1).</para></listitem></varlistentry>
   <varlistentry><term>Aeq :</term>
      <listitem><para> A matrix of doubles, containing the coefficients of linear equality constraints of size (m1 X n) where 'm1' is the number of linear equality constraints.</para></listitem></varlistentry>
   <varlistentry><term>beq :</term>
      <listitem><para> A vector of double, vector of doubles, related to 'Aeq' and represents the linear coefficients in the equality constraints of size (m1 X 1).</para></listitem></varlistentry>
   <varlistentry><term>lb :</term>
      <listitem><para> A vector of doubles, containing the lower bounds of the variables of size (1 X n) or (n X 1) where 'n' is the number of variables.</para></listitem></varlistentry>
   <varlistentry><term>ub :</term>
      <listitem><para> A vector of doubles, containing the upper bounds of the variables of size (1 X n) or (n X 1) where 'n' is the number of variables.</para></listitem></varlistentry>
   <varlistentry><term>nlc :</term>
      <listitem><para> A function, representing the nonlinear Constraints functions(both Equality and Inequality) of the problem. It is declared in such a way that nonlinear inequality constraints (c), and the nonlinear equality constraints (ceq) are defined as separate single row vectors.</para></listitem></varlistentry>
   <varlistentry><term>options :</term>
      <listitem><para> A list, containing the option for user to specify. See below for details.</para></listitem></varlistentry>
 </variablelist>
</refsection>
<refsection>
<title> Outputs</title>
 <variablelist>
   <varlistentry><term>xopt :</term>
      <listitem><para> A vector of doubles, containing the computed solution of the optimization problem.</para></listitem></varlistentry>
   <varlistentry><term>fopt :</term>
      <listitem><para> A double, containing the value of the function at x.</para></listitem></varlistentry>
   <varlistentry><term>exitflag :</term>
      <listitem><para> An integer, containing the flag which denotes the reason for termination of algorithm. See below for details.</para></listitem></varlistentry>
   <varlistentry><term>output :</term>
      <listitem><para> A structure, containing the information about the optimization. See below for details.</para></listitem></varlistentry>
   <varlistentry><term>lambda :</term>
      <listitem><para> A structure, containing the Lagrange multipliers of the lower bounds, upper bounds and constraints at the optimized point. See below for details.</para></listitem></varlistentry>
   <varlistentry><term>gradient :</term>
      <listitem><para> A vector of doubles, containing the objective's gradient of the solution.</para></listitem></varlistentry>
   <varlistentry><term>hessian  :</term>
      <listitem><para> A matrix of doubles, containing the Lagrangian's hessian of the solution.</para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
Search the minimum of a constrained optimization problem specified by:
   </para>
   <para>
Find the minimum of f(x) such that
   </para>
   <para>
<latex>
\begin{eqnarray}
&amp;\mbox{min}_{x}\ f(x) \\
&amp; \text{Subjected to}\\ 
&amp; &amp; A\boldsymbol{\cdot} x \leq b \\
&amp; &amp;A_{eq}\boldsymbol{\cdot} {x}  = b_{eq}\\
&amp; &amp;c(x) \leq  0\\
&amp; &amp;c_{eq}(x) \ =  0\\
&amp; &amp;lb \leq x \leq ub \\
\end{eqnarray}
</latex>
   </para>
   <para>
fmincon calls Ipopt, an optimization library written in C++, to solve the Constrained Optimization problem.
   </para>
   <para>
<title>Options</title>
The options allow the user to set various parameters of the Optimization problem. The syntax for the options is given by:
   </para>
   <para>
options= list("MaxIter", [---], "CpuTime", [---], "GradObj", ---, "Hessian", ---, "GradCon", ---);
   </para>
   <para>
The options should be defined as type "list" and consist of the following fields:
<itemizedlist>
<listitem>MaxIter : A Scalar, specifying the maximum number of iterations that the solver should take.</listitem>
<listitem>CpuTime : A Scalar, specifying the maximum amount of CPU time in seconds that the solver should take.</listitem>
<listitem>GradObj : A function, representing the gradient function of the Objective in vector form.</listitem>
<listitem>Hessian : A  function, representing the hessian function of the Lagrange in the form of a Symmetric Matrix with Input parameters as x, Objective factor and Lambda. Refer to Example 5 for definition of Lagrangian Hessian function.</listitem>
<listitem>GradCon : A function, representing the gradient of the nonlinear Constraints (both Equality and Inequality) of the problem. It is declared in such a way that gradient of nonlinear inequality constraints are defined first as a separate Matrix (cg of size m2 X n or as an empty), followed by gradient of nonlinear equality constraints as a separate matrix (ceqg of size m2 X n or as an empty) where m2 &amp;amp; m3 are number of nonlinear inequality and equality constraints respectively.</listitem>
</itemizedlist>
The default values for the various items are given as:
   </para>
   <para>
options = list("MaxIter", [3000], "CpuTime", [600]);
   </para>
   <para>
The exitflag allows the user to know the status of the optimization which is returned by Ipopt. The values it can take and what they indicate is described below:
<itemizedlist>
<listitem> 0 : Optimal Solution Found </listitem>
<listitem> 1 : Maximum Number of Iterations Exceeded. Output may not be optimal.</listitem>
<listitem> 2 : Maximum amount of CPU Time exceeded. Output may not be optimal.</listitem>
<listitem> 3 : Stop at Tiny Step.</listitem>
<listitem> 4 : Solved To Acceptable Level.</listitem>
<listitem> 5 : Converged to a point of local infeasibility.</listitem>
</itemizedlist>
   </para>
   <para>
For more details on exitflag, see the Ipopt documentation which can be found on http://www.coin-or.org/Ipopt/documentation/
   </para>
   <para>
The output data structure contains detailed information about the optimization process.
It is of type "struct" and contains the following fields.
<itemizedlist>
<listitem>output.Iterations: The number of iterations performed.</listitem>
<listitem>output.Cpu_Time  : The total cpu-time taken.</listitem>
<listitem>output.Objective_Evaluation: The number of Objective Evaluations performed.</listitem>
<listitem>output.Dual_Infeasibility  : The Dual Infeasiblity of the final soution.</listitem>
<listitem>output.Message: The output message for the problem.</listitem>
</itemizedlist>
   </para>
   <para>
The lambda data structure contains the Lagrange multipliers at the end of optimization. In the current version, the values are returned only when the the solution is optimal.
It has type "struct" and contains the following fields.
<itemizedlist>
<listitem>lambda.lower: The Lagrange multipliers for the lower bound constraints.</listitem>
<listitem>lambda.upper: The Lagrange multipliers for the upper bound constraints.</listitem>
<listitem>lambda.eqlin: The Lagrange multipliers for the linear equality constraints.</listitem>
<listitem>lambda.ineqlin: The Lagrange multipliers for the linear inequality constraints.</listitem>
<listitem>lambda.eqnonlin: The Lagrange multipliers for the nonlinear equality constraints.</listitem>
<listitem>lambda.ineqnonlin: The Lagrange multipliers for the nonlinear inequality constraints.</listitem>
</itemizedlist>
   </para>
   <para>
A few examples displaying the various functionalities of fmincon have been provided below. You will find a series problems and the appropriate code snippets to solve them.
   </para>
   
</refsection>

<refsection>
   <title>Example</title>
<para>
 Here we solve a simple nonlinear objective function, subjected to three linear inequality constraints.
   </para>
   <para>
Find x in R^2 such that it minimizes:
   </para>
   <para>
<latex>
\begin{eqnarray}
\mbox{min}_{x}\ f(x) = x_{1}^{2} - x_{1}  \boldsymbol{\cdot}  x_{2}/3 + x_{2}^{2}
\end{eqnarray}
\\\text{Subjected to:}\\
\begin{eqnarray}
\hspace{70pt} &amp;x_{1} + x_{2}&amp;\leq 2\\ 
\hspace{70pt} &amp;x_{1} + x_{2}/4&amp;\leq 1\\
\hspace{70pt} &amp;-x_{1} + x_{2}&amp;\geq -1\\
\end{eqnarray}
</latex>
   </para>
   <para>

   </para>
   <programlisting role="example"><![CDATA[
//Example 1:
//Objective function to be minimised
function y=f(x)
y=x(1)^2 - x(1)*x(2)/3 + x(2)^2;
endfunction
//Starting point, and linear constraints. Since we haven't added any eqaulity constraints or variable bounds, we need not specify them.
x0=[0 , 0];
A=[1,1 ; 1,1/4 ; 1,-1];
b=[2;1;1];
[x,fval,exitflag,output,lambda,grad,hessian] =fmincon(f, x0,A,b)

   ]]></programlisting>
</refsection>

<refsection>
   <title>Example</title>
<para>
Here we build up on the previous example by adding linear equality constraints.
We add the following constraints to the problem specified above:
   </para>
   <para>
<latex>
\begin{eqnarray}
&amp;x_{1} - x_{2}&amp;= 1 
\\&amp;2x_{1} + x_{2}&amp;= 2
\\ \end{eqnarray}
</latex>
   </para>
<para>
</para>
   <programlisting role="example"><![CDATA[

//Example 2:
//Objective function to be minimised
function y=f(x)
y=x(1)^2 - x(1)*x(2)/3 + x(2)^2;
endfunction
//Starting point, and linear constraints.
x0=[0 , 0];
A=[1,1 ; 1,1/4 ; -1,1];
b=[2;1;2];
//We specify the linear equality constraints below.
Aeq = [1,-1; 2, 1];
beq =  [1;2];
[x,fval,exitflag,output,lambda,grad,hessian] =fmincon(f, x0,A,b,Aeq,beq);


   ]]></programlisting>
</refsection>

<refsection>
   <title>Example</title>
<para>
In this example, we proceed to add the upper and lower bounds to the objective function.
   </para>
   <para>
<latex>
\begin{eqnarray}
-1 &amp;\leq x_{1} &amp;\leq \infty\\
-\infty &amp;\leq x_{2} &amp;\leq 1
\end{eqnarray}
</latex>
   </para>
<para>
</para>
   <programlisting role="example"><![CDATA[
//Example 3:
//Objective function to be minimised
function y=f(x)
y=x(1)^2 - x(1)*x(2)/3 + x(2)^2;
endfunction
//Starting point, and linear constraints.
x0=[0 , 0];
A=[1,1 ; 1,1/4 ; -1,1];
b=[2;1;2];
//We specify the linear equality constraints below.
Aeq = [1,-1; 2, 1];
beq =  [1;2];
//The upper and lower bounds for the objective function are defined in simple vectors as shown below.
lb = [-1;-%inf];
ub = [%inf;1];    //
[x,fval,exitflag,output,lambda,grad,hessian] =fmincon(f, x0,A,b,Aeq,beq,lb,ub);
//Press ENTER to continue

   ]]></programlisting>
</refsection>

<refsection>
   <title>Example</title>
 <para>
Finally, we add the nonlinear constraints to the problem. Note that there is a notable difference in the way this is done as compared to defining the linear constraints.
   </para>
   <para>
<latex>
\begin{eqnarray}
x_{1}^2-1&amp;\leq 0\\
x_{1}^2+x_{2}^2-1&amp;\leq 0\\
\end{eqnarray}
</latex>
</para>
<para>
</para>   
   <programlisting role="example"><![CDATA[
//Example 4:
//Objective function to be minimised
function y=f(x)
y=x(1)^2 - x(1)*x(2)/3 + x(2)^2;
endfunction
//Starting point, and linear constraints.
x0=[0 , 0];
A=[1,1 ; 1,1/4 ; -1,1];
b=[2;1;2];
//We specify the linear equality constraints below.
Aeq = [1,-1; 2, 1];
beq =  [1;2];
//The upper and lower bound for the objective function are specified below.
lb = [-1;-%inf];
ub = [%inf;1];
//Nonlinear constraints are required to be defined as a single function with the inequality and equality constraints in separate vectors.
function [c,ceq]=nlc(x)
c=[x(1)^2-1,x(1)^2+x(2)^2-1];
ceq=[];
endfunction
[x,fval,exitflag,output,lambda,grad,hessian] =fmincon(f, x0,A,b,Aeq,beq,lb,ub,nlc);
//Press ENTER to continue

   ]]></programlisting>
</refsection>

<refsection>
<title>Example</title>
   <para>
Additional Functionality:
   </para>
   <para>
We can further enhance the functionality of fmincon by setting input options. We can pre-define the gradient of the objective function and/or the hessian of the lagrange function and thereby improve the speed of computation. This is elaborated on in example 5. We take the following problem and add simple nonlinear constraints, specify the gradients and the hessian of the Lagrange Function. We also set solver parameters using the options.
   </para>

   <para>
    <latex>

    \begin{eqnarray}
    \mbox{min}_{x}\ f(x)= x_{1}*x_{2} + x_{2}*x_{3}
    \end{eqnarray}
    \\  \text{Subjected to:}\\
    \begin{eqnarray}
    \hspace{70pt} &amp;c_{1}: x_{1}^2 - x_{2}^2 + x_{3}^2&amp;\leq 2 \\
    \hspace{70pt} &amp;c_{2}: x_{1}^2 + x_{2}^2 + x_{3}^2&amp;\leq 10
    \end{eqnarray}
	
    </latex>
   </para>
   <para>
</para>
   <programlisting role="example"><![CDATA[
//Example 5:
//Objective function to be minimised
function y=f(x)
y=x(1)*x(2)+x(2)*x(3);
endfunction
//Starting point, linear constraints and variable bounds
x0=[0.1 , 0.1 , 0.1];
A=[];
b=[];
Aeq=[];
beq=[];
lb=[];
ub=[];
//Nonlinear constraints
function [c, ceq]=nlc(x)
c = [x(1)^2 - x(2)^2 + x(3)^2 - 2 , x(1)^2 + x(2)^2 + x(3)^2 - 10];
ceq = [];
endfunction
//Gradient of objective function
function y=fGrad(x)
y= [x(2),x(1)+x(3),x(2)];
endfunction
//Hessian of the Lagrange Function, which has been pre-defined to improve solver speed.
function y=lHess(x, obj, lambda)
y= obj*[0,1,0;1,0,1;0,1,0] + lambda(1)*[2,0,0;0,-2,0;0,0,2] + lambda(2)*[2,0,0;0,2,0;0,0,2]
endfunction
//Gradient of nonlinear Constraints
function [cg, ceqg]=cGrad(x)
cg=[2*x(1) , -2*x(2) , 2*x(3) ; 2*x(1) , 2*x(2) , 2*x(3)];
ceqg=[];
endfunction
//Options
options=list("MaxIter", [1500], "CpuTime", [500], "GradObj", fGrad, "Hessian", lHess,"GradCon", cGrad);
//Calling Ipopt
[x,fval,exitflag,output] =fmincon(f, x0,A,b,Aeq,beq,lb,ub,nlc,options)
//Press ENTER to continue
   ]]></programlisting>
</refsection>

<refsection>
<title>Example</title>

   <para>
Infeasible Problems: Find x in R^2 such that it minimizes:
   </para>
   <para>
<latex>
\begin{eqnarray}
f(x) = x_{1}^{2} - x_{1}  \boldsymbol{\cdot}  x_{2}/3 + x_{2}^{2}
\end{eqnarray}
\\\text{Subjected to:}\\
\begin{eqnarray}
\hspace{70pt} &amp;x_{1} + x_{2}&amp;\leq 2\\
\hspace{70pt} &amp;x_{1} + x_{2}/4&amp;\leq 1\\
\hspace{70pt} &amp;-x_{1} + x_{2}&amp;\geq -1\\ 
\hspace{70pt} &amp;x_{1} + x_{2}&amp;= 2
\end{eqnarray}
</latex>
   </para>
   <para>
   </para>
   <programlisting role="example"><![CDATA[
//Example 6:
//Infeasible objective function.
function y=f(x)
y=x(1)^2 - x(1)*x(2)/3 + x(2)^2;
endfunction
x0=[0 , 0];
A=[1,1 ; 1,1/4 ; 1,-1];
b=[2;1;1];
Aeq = [1,1];
beq = 3;
[x,fval,exitflag,output,lambda,grad,hessian] =fmincon(f, x0,A,b,Aeq,beq)

   ]]></programlisting>
   </refsection>

<refsection>
<title>Example</title>
<para>
Unbounded Problems: Find x in R^2 such that it minimizes:
</para>
   <para>
<latex>
\begin{eqnarray}
f(x) = x_{1}  \boldsymbol{\cdot}  x_{2}/3 - x_{1}^{2} - x_{2}^{2}
\end{eqnarray}
\\\text{Subjected to:}\\
\begin{eqnarray}
\hspace{70pt} &amp;x_{1} + x_{2}&amp;\geq 2\\
\hspace{70pt} &amp;x_{1} + x_{2}&amp;\geq -1 
\\\end{eqnarray}
</latex>
   </para>
   <para>
   </para>
<programlisting role="example"><![CDATA[
//Example 7: Unbounded objective function.
function y=f(x)
y=-(x(1)^2 - x(1)*x(2)/3 + x(2)^2);
endfunction
x0=[0 , 0];
A=[-1,-1 ; 1,1];
b=[-2;1];
[x,fval,exitflag,output,lambda,grad,hessian] =fmincon(f, x0,A,b);

]]></programlisting>

</refsection>


<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>R.Vidyadhar , Vignesh Kannan</member>
   </simplelist>
</refsection>
</refentry>
