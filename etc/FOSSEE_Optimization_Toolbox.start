// Copyright (C) 2019 - IIT Bombay - FOSSEE
//
// This file must be used under the terms of the CeCILL.
// This source file is licensed as described in the file COPYING, which
// you should have received as part of this distribution.  The terms
// are also available at
// http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
// Author: Siddharth Agarwal
// Organization: FOSSEE, IIT Bombay
// Email: toolbox@scilab.in

mprintf("Start FOSSEE Optimization Toolbox\n");

[a, opt] = getversion();
Version = opt(2);

etc_tlbx  = get_absolute_file_path("FOSSEE_Optimization_Toolbox.start");
etc_tlbx  = getshortpathname(etc_tlbx);
root_tlbx = strncpy( etc_tlbx, length(etc_tlbx)-length("\etc\") );

//Load  functions library
// =============================================================================
mprintf("\tLoad macros\n");
pathmacros = pathconvert( root_tlbx ) + "macros" + filesep();
symphony_lib = lib(pathmacros);
clear pathmacros;

// load gateways
// =============================================================================

mprintf("\tLoad gateways\n");
[a, opt] = getversion();
Version = opt(2);
ilib_verbose(0);
if getos()=="Windows" then
    lib_path = root_tlbx + "/thirdparty/windows/bin/" + Version;
    link(lib_path+filesep()+"IpOptFSS.dll");
    link(lib_path+filesep()+"IpOpt-vc10.dll");
else
    lib_path = root_tlbx + "/thirdparty/linux/lib/" + Version;
    link(lib_path + "/libCoinUtils.so");
    link(lib_path + "/libClp.so");
    link(lib_path + "/libClpSolver.so");
    link(lib_path + "/libOsi.so");
    link(lib_path + "/libOsiCommonTests.so");
    link(lib_path + "/libOsiClp.so");
    link(lib_path + "/libCgl.so");
    link(lib_path + "/libSym.so");
    link(lib_path + "/libOsiSym.so");
    link(lib_path + "/libcoinblas.so");
    link(lib_path + "/libcoinlapack.so");
    link(lib_path + "/libcoinmumps.so");
    link(lib_path + "/libipopt.so");
	link(lib_path + "/libCbc.so");
    link(lib_path + '/libbonmin.so');
    link(lib_path + "/libecos.so");

end
exec(pathconvert(root_tlbx + filesep() + "sci_gateway" + filesep() + "loader_gateway.sce",%f));

// Load and add help chapter
// =============================================================================
if ( %t ) then
if or(getscilabmode() == ["NW";"STD"]) then
        mprintf("\tLoad help\n");
        path_addchapter = pathconvert(root_tlbx+"/jar");
        if ( isdir(path_addchapter) <> [] ) then
                add_help_chapter("FOSSEE_Optimization_Toolbox", path_addchapter, %F);
                clear add_help_chapter;
        end
        clear path_addchapter;
end
end



clear etc_tlbx root_tlbx Version a opt lib_path;
